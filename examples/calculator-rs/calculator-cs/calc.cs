// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.9.0+v0.28.3
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;

namespace uniffi.calc;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public ulong capacity;
    public ulong len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_calculator_rustbuffer_alloc(
                    Convert.ToUInt64(size),
                    ref status
                );
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException(
                        $"RustBuffer.Alloc() returned null data pointer (size={size})"
                    );
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_calculator_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, long length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream((byte*)data.ToPointer(), Convert.ToInt64(len))
            );
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    Convert.ToInt64(capacity),
                    Convert.ToInt64(capacity),
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToUInt64(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException(
                    "junk remaining in buffer after lifting, something is very wrong!!"
                );
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct UniffiRustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
internal class UniffiException : System.Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

internal class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

internal class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

internal class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

internal class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

internal class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

internal class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

internal class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : System.Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException(
            "library has returned an error not declared in UNIFFI interface file"
        );
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref UniffiRustCallStatus status);
    public delegate U RustCallFunc<out U>(ref UniffiRustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallFunc<U> callback
    )
        where E : UniffiException
    {
        var status = new UniffiRustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallAction callback
    )
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : System.Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(
            stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte()
        );
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail that will be called internally by the public API.
static class _UniFFILib
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiRustFutureContinuationCallback(ulong @data, sbyte @pollResult);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureFree(ulong @handle);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceFree(ulong @handle);

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFuture
    {
        public ulong @handle;
        public IntPtr @free;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU8
    {
        public byte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI8
    {
        public sbyte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU16
    {
        public ushort @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI16
    {
        public short @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU32
    {
        public uint @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI32
    {
        public int @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU64
    {
        public ulong @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI64
    {
        public long @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF32
    {
        public float @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF64
    {
        public double @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructPointer
    {
        public IntPtr @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompletePointer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructPointer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructRustBuffer
    {
        public RustBuffer @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteRustBuffer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructRustBuffer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructVoid
    {
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteVoid(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructVoid @result
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod0(
        ulong @uniffiHandle,
        byte @digit,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod1(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod2(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod3(
        ulong @uniffiHandle,
        ref IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod4(
        ulong @uniffiHandle,
        IntPtr @rhs,
        ref sbyte @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod5(
        ulong @uniffiHandle,
        ref double @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod6(
        ulong @uniffiHandle,
        RustBuffer @op,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceCalculatorMethod7(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceCalculator
    {
        public IntPtr @addDigit;
        public IntPtr @applyOp;
        public IntPtr @backspace;
        public IntPtr @copy;
        public IntPtr @eq;
        public IntPtr @get;
        public IntPtr @setOp;
        public IntPtr @toggleDecimal;
        public IntPtr @uniffiFree;
    }

    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();

        UniffiCallbackInterfaceCalculator.Register();
    }

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr uniffi_calculator_fn_clone_calculator(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_free_calculator(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_init_callback_vtable_calculator(
        ref _UniFFILib.UniffiVTableCallbackInterfaceCalculator @vtable
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_method_calculator_add_digit(
        IntPtr @ptr,
        byte @digit,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_method_calculator_apply_op(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_method_calculator_backspace(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr uniffi_calculator_fn_method_calculator_copy(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte uniffi_calculator_fn_method_calculator_eq(
        IntPtr @ptr,
        IntPtr @rhs,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern double uniffi_calculator_fn_method_calculator_get(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_method_calculator_set_op(
        IntPtr @ptr,
        RustBuffer @op,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_method_calculator_toggle_decimal(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_calculator_fn_func_register(
        IntPtr @calc,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_calculator_rustbuffer_alloc(
        ulong @size,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_calculator_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rustbuffer_free(
        RustBuffer @buf,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_calculator_rustbuffer_reserve(
        RustBuffer @buf,
        ulong @additional,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_u8(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte ffi_calculator_rust_future_complete_u8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_i8(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte ffi_calculator_rust_future_complete_i8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_u16(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort ffi_calculator_rust_future_complete_u16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_i16(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern short ffi_calculator_rust_future_complete_i16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_u32(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint ffi_calculator_rust_future_complete_u32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_i32(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ffi_calculator_rust_future_complete_i32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_u64(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ffi_calculator_rust_future_complete_u64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_i64(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern long ffi_calculator_rust_future_complete_i64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_f32(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern float ffi_calculator_rust_future_complete_f32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_f64(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern double ffi_calculator_rust_future_complete_f64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_pointer(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr ffi_calculator_rust_future_complete_pointer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_calculator_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_cancel_void(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_free_void(IntPtr @handle);

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_calculator_rust_future_complete_void(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_func_register();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_add_digit();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_apply_op();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_backspace();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_copy();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_eq();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_get();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_set_op();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_calculator_checksum_method_calculator_toggle_decimal();

    [DllImport("calculator.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint ffi_calculator_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version = _UniFFILib.ffi_calculator_uniffi_contract_version();
        if (26 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"uniffi.calc: uniffi bindings expected version `26`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_func_register();
            if (checksum != 1157)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_func_register` checksum `1157`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_add_digit();
            if (checksum != 18462)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_add_digit` checksum `18462`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_apply_op();
            if (checksum != 7552)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_apply_op` checksum `7552`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_backspace();
            if (checksum != 11608)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_backspace` checksum `11608`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_copy();
            if (checksum != 45030)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_copy` checksum `45030`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_eq();
            if (checksum != 58800)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_eq` checksum `58800`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_get();
            if (checksum != 31933)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_get` checksum `31933`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_set_op();
            if (checksum != 45999)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_set_op` checksum `45999`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_calculator_checksum_method_calculator_toggle_decimal();
            if (checksum != 39818)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.calc: uniffi bindings expected function `uniffi_calculator_checksum_method_calculator_toggle_decimal` checksum `39818`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterUInt8 : FfiConverter<byte, byte>
{
    public static FfiConverterUInt8 INSTANCE = new FfiConverterUInt8();

    public override byte Lift(byte value)
    {
        return value;
    }

    public override byte Read(BigEndianStream stream)
    {
        return stream.ReadByte();
    }

    public override byte Lower(byte value)
    {
        return value;
    }

    public override int AllocationSize(byte value)
    {
        return 1;
    }

    public override void Write(byte value, BigEndianStream stream)
    {
        stream.WriteByte(value);
    }
}

class FfiConverterDouble : FfiConverter<double, double>
{
    public static FfiConverterDouble INSTANCE = new FfiConverterDouble();

    public override double Lift(double value)
    {
        return value;
    }

    public override double Read(BigEndianStream stream)
    {
        return stream.ReadDouble();
    }

    public override double Lower(double value)
    {
        return value;
    }

    public override int AllocationSize(double value)
    {
        return 8;
    }

    public override void Write(double value, BigEndianStream stream)
    {
        stream.WriteDouble(value);
    }
}

class FfiConverterBoolean : FfiConverter<bool, sbyte>
{
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value)
    {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream)
    {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value)
    {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value)
    {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream)
    {
        stream.WriteSByte(Lower(value));
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(Convert.ToInt32(value.len));
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = System.Text.Encoding.UTF8.GetByteCount(value);
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

internal interface Calculator
{
    void AddDigit(byte @digit);
    void ApplyOp();
    void Backspace();
    Calculator Copy();
    bool Eq(Calculator @rhs);
    double Get();
    void SetOp(CalcOp @op);
    void ToggleDecimal();
}

internal class CalculatorImpl : Calculator, IDisposable
{
    protected IntPtr pointer;
    private int _wasDestroyed = 0;
    private long _callCounter = 1;

    public CalculatorImpl(IntPtr pointer)
    {
        this.pointer = pointer;
    }

    ~CalculatorImpl()
    {
        Destroy();
    }

    protected void FreeRustArcPtr()
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.uniffi_calculator_fn_free_calculator(this.pointer, ref status);
            }
        );
    }

    protected IntPtr CloneRustArcPtr()
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.uniffi_calculator_fn_clone_calculator(this.pointer, ref status);
            }
        );
    }

    public void Destroy()
    {
        // Only allow a single call to this method.
        if (Interlocked.CompareExchange(ref _wasDestroyed, 1, 0) == 0)
        {
            // This decrement always matches the initial count of 1 given at creation time.
            if (Interlocked.Decrement(ref _callCounter) == 0)
            {
                FreeRustArcPtr();
            }
        }
    }

    public void Dispose()
    {
        Destroy();
        GC.SuppressFinalize(this); // Suppress finalization to avoid unnecessary GC overhead.
    }

    private void IncrementCallCounter()
    {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        long count;
        do
        {
            count = Interlocked.Read(ref _callCounter);
            if (count == 0L)
                throw new System.ObjectDisposedException(
                    String.Format("'{0}' object has already been destroyed", this.GetType().Name)
                );
            if (count == long.MaxValue)
                throw new System.OverflowException(
                    String.Format("'{0}' call counter would overflow", this.GetType().Name)
                );
        } while (Interlocked.CompareExchange(ref _callCounter, count + 1, count) != count);
    }

    private void DecrementCallCounter()
    {
        // This decrement always matches the increment we performed above.
        if (Interlocked.Decrement(ref _callCounter) == 0)
        {
            FreeRustArcPtr();
        }
    }

    internal void CallWithPointer(Action<IntPtr> action)
    {
        IncrementCallCounter();
        try
        {
            action(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    internal T CallWithPointer<T>(Func<IntPtr, T> func)
    {
        IncrementCallCounter();
        try
        {
            return func(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    public void AddDigit(byte @digit)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_calculator_fn_method_calculator_add_digit(
                        thisPtr,
                        FfiConverterUInt8.INSTANCE.Lower(@digit),
                        ref _status
                    )
            )
        );
    }

    public void ApplyOp()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_calculator_fn_method_calculator_apply_op(thisPtr, ref _status)
            )
        );
    }

    public void Backspace()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_calculator_fn_method_calculator_backspace(
                        thisPtr,
                        ref _status
                    )
            )
        );
    }

    public Calculator Copy()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterTypeCalculator.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_calculator_fn_method_calculator_copy(thisPtr, ref _status)
                )
            )
        );
    }

    public bool Eq(Calculator @rhs)
    {
        return CallWithPointer(thisPtr =>
            FfiConverterBoolean.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_calculator_fn_method_calculator_eq(
                            thisPtr,
                            FfiConverterTypeCalculator.INSTANCE.Lower(@rhs),
                            ref _status
                        )
                )
            )
        );
    }

    public double Get()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterDouble.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_calculator_fn_method_calculator_get(thisPtr, ref _status)
                )
            )
        );
    }

    public void SetOp(CalcOp @op)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_calculator_fn_method_calculator_set_op(
                        thisPtr,
                        FfiConverterTypeCalcOp.INSTANCE.Lower(@op),
                        ref _status
                    )
            )
        );
    }

    public void ToggleDecimal()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_calculator_fn_method_calculator_toggle_decimal(
                        thisPtr,
                        ref _status
                    )
            )
        );
    }
}

class UniffiCallbackInterfaceCalculator
{
    static void AddDigit(
        ulong @uniffiHandle,
        byte @digit,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            uniffiObject.AddDigit(FfiConverterUInt8.INSTANCE.Lift(@digit));
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void ApplyOp(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            uniffiObject.ApplyOp();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Backspace(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            uniffiObject.Backspace();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Copy(
        ulong @uniffiHandle,
        ref IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            var result = uniffiObject.Copy();
            @uniffiOutReturn = FfiConverterTypeCalculator.INSTANCE.Lower(result);
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Eq(
        ulong @uniffiHandle,
        IntPtr @rhs,
        ref sbyte @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            var result = uniffiObject.Eq(FfiConverterTypeCalculator.INSTANCE.Lift(@rhs));
            @uniffiOutReturn = FfiConverterBoolean.INSTANCE.Lower(result);
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Get(
        ulong @uniffiHandle,
        ref double @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            var result = uniffiObject.Get();
            @uniffiOutReturn = FfiConverterDouble.INSTANCE.Lower(result);
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void SetOp(
        ulong @uniffiHandle,
        RustBuffer @op,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            uniffiObject.SetOp(FfiConverterTypeCalcOp.INSTANCE.Lift(@op));
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void ToggleDecimal(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeCalculator.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            uniffiObject.ToggleDecimal();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeCalculator.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod0(AddDigit);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod1 _m1 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod1(ApplyOp);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod2 _m2 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod2(Backspace);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod3 _m3 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod3(Copy);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod4 _m4 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod4(Eq);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod5 _m5 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod5(Get);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod6 _m6 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod6(SetOp);
    static _UniFFILib.UniffiCallbackInterfaceCalculatorMethod7 _m7 =
        new _UniFFILib.UniffiCallbackInterfaceCalculatorMethod7(ToggleDecimal);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceCalculator _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceCalculator
        {
            @addDigit = Marshal.GetFunctionPointerForDelegate(_m0),
            @applyOp = Marshal.GetFunctionPointerForDelegate(_m1),
            @backspace = Marshal.GetFunctionPointerForDelegate(_m2),
            @copy = Marshal.GetFunctionPointerForDelegate(_m3),
            @eq = Marshal.GetFunctionPointerForDelegate(_m4),
            @get = Marshal.GetFunctionPointerForDelegate(_m5),
            @setOp = Marshal.GetFunctionPointerForDelegate(_m6),
            @toggleDecimal = Marshal.GetFunctionPointerForDelegate(_m7),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_calculator_fn_init_callback_vtable_calculator(
            ref UniffiCallbackInterfaceCalculator._vtable
        );
    }
}

class ConcurrentHandleMap<T>
    where T : notnull
{
    Dictionary<ulong, T> map = new Dictionary<ulong, T>();

    Object lock_ = new Object();
    ulong currentHandle = 0;

    public ulong Insert(T obj)
    {
        lock (lock_)
        {
            currentHandle += 1;
            map[currentHandle] = obj;
            return currentHandle;
        }
    }

    public bool TryGet(ulong handle, out T result)
    {
        lock (lock_)
        {
#pragma warning disable 8601 // Possible null reference assignment
            return map.TryGetValue(handle, out result);
#pragma warning restore 8601
        }
    }

    public T Get(ulong handle)
    {
        if (TryGet(handle, out var result))
        {
            return result;
        }
        else
        {
            throw new InternalException("ConcurrentHandleMap: Invalid handle");
        }
    }

    public bool Remove(ulong handle)
    {
        return Remove(handle, out T result);
    }

    public bool Remove(ulong handle, out T result)
    {
        lock (lock_)
        {
            // Possible null reference assignment
#pragma warning disable 8601
            if (map.TryGetValue(handle, out result))
            {
#pragma warning restore 8601
                map.Remove(handle);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

static class UniffiCallbackResponseStatus
{
    public static sbyte SUCCESS = 0;
    public static sbyte ERROR = 1;
    public static sbyte UNEXPECTED_ERROR = 2;
}

class FfiConverterTypeCalculator : FfiConverter<Calculator, IntPtr>
{
    public ConcurrentHandleMap<Calculator> handleMap = new ConcurrentHandleMap<Calculator>();

    public static FfiConverterTypeCalculator INSTANCE = new FfiConverterTypeCalculator();

    public override IntPtr Lower(Calculator value)
    {
        return (IntPtr)handleMap.Insert(value);
    }

    public override Calculator Lift(IntPtr value)
    {
        return new CalculatorImpl(value);
    }

    public override Calculator Read(BigEndianStream stream)
    {
        return Lift(new IntPtr(stream.ReadLong()));
    }

    public override int AllocationSize(Calculator value)
    {
        return 8;
    }

    public override void Write(Calculator value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).ToInt64());
    }
}

internal enum CalcOp : int
{
    None,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    Pow,
    Square,
    Sqrt,
    Inv,
    Negate,
    Clear,
}

class FfiConverterTypeCalcOp : FfiConverterRustBuffer<CalcOp>
{
    public static FfiConverterTypeCalcOp INSTANCE = new FfiConverterTypeCalcOp();

    public override CalcOp Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(CalcOp), value))
        {
            return (CalcOp)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeCalcOp.Read()", value)
            );
        }
    }

    public override int AllocationSize(CalcOp value)
    {
        return 4;
    }

    public override void Write(CalcOp value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

#pragma warning restore 8625
internal static class CalcMethods
{
    public static void Register(Calculator @calc)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus _status) =>
                _UniFFILib.uniffi_calculator_fn_func_register(
                    FfiConverterTypeCalculator.INSTANCE.Lower(@calc),
                    ref _status
                )
        );
    }
}
