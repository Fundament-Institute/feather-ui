# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 Fundament Software SPC <https://fundament.software>

# FIXME: type of universe
# we need to wrap this, and wrap takes a type in star-10
# so we have to settle for star-9
let omega = 9
# FIXME: apparently variables aren't allowed here
#let universe = type_(omega, 1)
let universe = type_(9, 1)
let type-omega = type_(9, 0)
let type-omega+1 = type_(10, 0)

# nor expressions
####let implicit-wrap = lambda_curry ((T : type_(omega + 1, 0)))
	lambda (x : T)
		wrap T x

let implicit-wrap = lambda_curry ((T : type-omega+1))
	lambda (x : T)
		wrap T x

let implicit-unwrap = lambda_implicit (T : type-omega+1)
	lambda (x : wrapped(T))
		unwrap T x

####let implicit-unstrict-wrap = lambda_curry ((T : type-omega+1))
		lambda (x : T)
			unstrict-wrap T x

	let implicit-unstrict-unwrap = lambda_implicit (T : type-omega+1)
		lambda (x : unstrict-wrapped(T))
			unstrict-unwrap T x

let tuple-of-implicit = lambda_implicit (T : type-omega+1)
	lambda_single (xs : T)
		xs

let explicit-unwrap = unwrap
let wrap = implicit-wrap
let unwrap = implicit-unwrap
####let unstrict-wrap = implicit-unstrict-wrap
	let unstrict-unwrap = implicit-unstrict-unwrap

let host-bool-wrap            = intrinsic "return terms.strict_value.host_bool_type"      : wrapped(host-type)
let host-string-wrap          = intrinsic "return terms.strict_value.host_string_type"    : wrapped(host-type)
let host-syntax-wrap          = intrinsic "return terms.host_syntax_type"          : wrapped(host-type)
let host-environment-wrap     = intrinsic "return terms.host_environment_type"     : wrapped(host-type)
let host-goal-wrap            = intrinsic "return terms.host_goal_type"            : wrapped(host-type)
let host-inferrable-term-wrap = intrinsic "return terms.host_inferrable_term_type" : wrapped(host-type)
let host-checkable-term-wrap  = intrinsic "return terms.host_checkable_term_type"  : wrapped(host-type)
let host-lua-error-wrap       = intrinsic "return terms.host_lua_error_type"       : wrapped(host-type)

let host-bool            = unwrap(host-bool-wrap)
let host-string          = unwrap(host-string-wrap)
let host-syntax          = unwrap(host-syntax-wrap)
let host-environment     = unwrap(host-environment-wrap)
let host-goal            = unwrap(host-goal-wrap)
let host-inferrable-term = unwrap(host-inferrable-term-wrap)
let host-checkable-term  = unwrap(host-checkable-term-wrap)
let host-lua-error       = unwrap(host-lua-error-wrap)

let srel = lambda_implicit (U : type-omega+1)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#srel", function(target)
					return U.notail(terms.typed_term.srel_type(target))
				end))
			:
			wrapped (forall ((target : U)) -> (rel : U))

let variance = lambda_implicit (U : type-omega+1)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#variance", function(target)
					return U.notail(terms.typed_term.variance_type(target))
				end))
			:
			wrapped (forall ((target : U)) -> (res : U))

let subtyping = intrinsic "return evaluator.UniverseOmegaRelation" : srel(type-omega)

let tuple-desc-type = lambda_implicit (U : universe)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#tuple-desc-type", function(a_universe)
					return U.notail(terms.typed_term.tuple_desc_type(a_universe))
				end))
			:
			wrapped (forall ((a-universe : U)) -> (desc : U))

let tuple-desc-relation = intrinsic "return evaluator.TupleDescRelation" : srel(tuple-desc-type(type-omega))

let _|_ = lambda_implicit (U : type-omega+1)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#union", function(left, right)
					return U.notail(terms.typed_term.union_type(left, right))
				end))
			:
			wrapped (forall (left : U, right : U) -> (union : U))

let _&_ = lambda_implicit (U : type-omega+1)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#intersection", function(left, right)
					return U.notail(terms.typed_term.intersection_type(left, right))
				end))
			:
			wrapped (forall (left : U, right : U) -> (intersection : U))

let covariant = lambda_curry (U : universe, a : U)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#covariant", function(rel)
					local positive = terms.typed_term.literal(terms.strict_value.host_value(true))
					return U.notail(terms.typed_term.variance_cons(positive, rel))
				end))
			:
			wrapped (forall ((rel : srel(a))) -> (covariant-rel : variance(a)))

let contravariant = lambda_curry (U : universe, a : U)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#contravariant", function(rel)
					local positive = terms.typed_term.literal(terms.strict_value.host_value(false))
					return U.notail(terms.typed_term.variance_cons(positive, rel))
				end, "rel"))
			:
			wrapped (forall ((rel : srel(a))) -> (contravariant-rel : variance(a)))


let tuple-type = lambda_implicit (U : universe)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#tuple-type", function(desc)
					return U.notail(terms.typed_term.tuple_type(desc))
				end, "desc"))
			:
			wrapped (forall ((desc : tuple-desc-type(U))) -> (T : U))

let host-tuple-type =
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#host-tuple-type", function(desc)
					return U.notail(terms.typed_term.host_tuple_type(desc))
				end, "desc"))
			:
			wrapped (forall ((desc : tuple-desc-type(host-type))) -> (T : host-type))

let host-family-sig-variances = lambda (signature : type_(1, 0))
	let inner = intrinsic
		""""
			return base_env.convert_sig
		:
		host-func-type ((signature : wrapped(type_(1, 0)))) -> ((srel_type : wrapped(type_(1, 0))))
	let (srels-t) = inner(wrap(signature))
	unwrap(srels-t)

let host-string-concat = intrinsic "return function(a, b) return U.notail(a .. b) end" :
	host-func-type (a : host-string, b : host-string) -> ((c : host-string))

let host-unique-id-wrap = intrinsic
	""""
		local id = { name = "unique_id" }
		evaluator.register_host_srel(id, evaluator.IndepTupleRelation())
		return U.notail(terms.strict_value.host_user_defined_type(id, terms_gen.declare_array(terms.strict_value)()))
	:
	wrapped(host-type)
let host-unique-id = unwrap(host-unique-id-wrap)
let new-host-unique-id = lambda (name : host-string)
	let source0 = "return { name = \""
	let (source1) = host-string-concat(source0, name)
	let (source2) = host-string-concat(source1, "\" }")
	intrinsic source2 : host-unique-id

let new-host-type-family = lambda (unique-id : host-unique-id, signature : type_(1, 0), variance : host-family-sig-variances(signature))
	let inner = intrinsic
		""""
			return base_env.new_host_type_family
		:
		host-func-type (
				unique-id  : host-unique-id,
				signature_ : wrapped(type_(1, 0)),
				variance_  : wrapped(host-family-sig-variances(unwrap(signature_))))
			->
			((family : wrapped(unwrap(signature_))))
	let (family) = inner(unique-id, wrap(signature), wrap(variance))
	unwrap(family)
let new-host-type = lambda (unique-id : host-unique-id)
	let Tfam = new-host-type-family unique-id
		forall () -> (T : host-type)
		tuple-of-implicit()
	Tfam()

let host-array-type = new-host-type-family new-host-unique-id("array")
	forall ((T : host-type)) -> (T : host-type)
	tuple-of-implicit covariant(subtyping)

let host-array-new = lambda (T : host-type)
	let inner = intrinsic
		""""
			local function array_new()
				return {}
			end
			return array_new
		:
		host-func-type () -> ((arr : host-array-type(T)))
	let (arr) = inner()
	arr
let host-array-set = lambda_implicit (T : host-type)
	lambda (arr : host-array-type(T), index : host-number, elem : T)
		let inner = intrinsic
			""""
				local function array_set(array, index, elem)
					-- we have to clone because can't guarantee input array isn't reused
					-- Yet. growth mindset.
					cloned = {}
					for i, v in ipairs(array) do
						cloned[i] = v
					end
					cloned[index] = elem
					return cloned
				end
				return array_set
			:
			host-func-type (arr : host-array-type(T), index : host-number, elem : T) -> ((arr : host-array-type(T)))
		let (arr) = inner(arr, index, elem)
		arr
let host-array-get = lambda_implicit (T : host-type)
	lambda (arr : host-array-type(T), index : host-number)
		let inner = intrinsic
			""""
				local function array_get(array, index)
					return U.notail(array[index])
				end
				return array_get
			:
			host-func-type (arr : host-array-type(T), index : host-number) -> ((elem : T))
		let (elem) = inner(arr, index)
		elem

let terms-gen-array = new-host-type(new-host-unique-id("terms-gen-array"))

let void =
	unwrap
		intrinsic
			""""
				local desc = terms.empty
				local basetype = terms.strict_value.enum_type(desc:unwrap_strict())
				return basetype
			:
			wrapped type

let host-unit = new-host-type(new-host-unique-id("host-unit"))
let host-nil = intrinsic "return nil" : host-unit

let tuple-of = lambda (U : universe, desc : tuple-desc-type(U))
	lambda_single (t : tuple-type(desc))
		t
let host-tuple-of = lambda (desc : tuple-desc-type(host-type))
	intrinsic "return function(...) return ... end" :
		host-func-type (t : host-tuple-type(desc)) -> (t : host-tuple-type(desc))

let tuple-desc-empty = lambda (U : universe)
	let empty = intrinsic "return terms.empty:unwrap_strict()" : wrapped(tuple-desc-type(U))
	unwrap(empty)
let tuple-desc-elem-explicit = lambda (U : universe)
	let U-tuple-desc-type = tuple-desc-type(U)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#tuple-desc-elem-explicit", function(desc, elem)
					return U.notail(terms.typed_cons(desc, elem))
				end))
			:
			wrapped(forall (desc : U-tuple-desc-type, elem : (forall (rest : tuple-type(desc)) -> (next : U))) -> (res : U-tuple-desc-type))

let tuple-desc-singleton = lambda (U : universe, T : U)
	tuple-desc-elem-explicit(U)
		tuple-desc-empty U
		lambda ()
			T

let tuple-desc-concat-indep = lambda_implicit (U : universe)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#tuple-desc-concat", function(prefix, suffix)
					return U.notail(terms.typed_term.tuple_desc_concat_indep(prefix, suffix))
				end))
			:
			wrapped (forall (pfx : tuple-desc-type(U), sfx : tuple-desc-type(U)) -> (res : tuple-desc-type(U)))

let host-tuple-concat = lambda (
		head : tuple-desc-type(host-type),
		tail : tuple-desc-type(host-type),
		hd   : host-tuple-type(head),
		tl   : host-tuple-type(tail))
	let inner = intrinsic
		""""
			local value_array = terms_gen.declare_array(terms_gen.any_lua_type)
			local function host_tuple_concat(head, tail)
				local head_elements = head:unwrap_host_tuple_value()
				local tail_elements = tail:unwrap_host_tuple_value()
				local new_elements = value_array()
				for _, e in head_elements:ipairs() do
					new_elements:append(e)
				end
				for _, e in tail_elements:ipairs() do
					new_elements:append(e)
				end
				return U.notail(terms.strict_value.host_tuple_value(new_elements))
			end
			return host_tuple_concat
		:
		host-func-type (
				hd : wrapped(host-tuple-type(head)),
				tl : wrapped(host-tuple-type(tail)))
			->
			((cat : wrapped(host-tuple-type(tuple-desc-concat-indep(head, tail)))))
	let (cat) = inner(wrap(hd), wrap(tl))
	unwrap(cat)

let host-if = lambda_implicit (T : type-omega)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#host-if", function(subject, consequent, alternate)
					return U.notail(terms.typed_term.host_if(subject, consequent, alternate))
				end))
			:
			wrapped(forall (subject : host-bool, consequent : T, alternate : T) -> (res : T))

let tuple-desc-empty = lambda (U : universe)
	let empty = intrinsic "return terms.empty:unwrap_strict()" : wrapped(tuple-desc-type(U))
	unwrap(empty)
let tuple-desc-elem-explicit = lambda (U : universe)
	let U-tuple-desc-type = tuple-desc-type(U)
	unwrap
		intrinsic
			""""
				return U.notail(evaluator.gen_base_operator("#tuple-desc-elem-explicit", function(desc, elem)
					return U.notail(terms.typed_cons(desc, elem))
				end))
			:
			wrapped(forall (desc : U-tuple-desc-type, elem : (forall (rest : tuple-type(desc)) -> (next : U))) -> (res : U-tuple-desc-type))

let tuple-desc-elem-implicit = lambda_implicit (U : universe)
	tuple-desc-elem-explicit U


## syntax matcher and operative stuff

let host-literal = new-host-type(new-host-unique-id("literal"))

let host-expression-args = new-host-type(new-host-unique-id("expression-args"))
let expression-args-new = intrinsic "return alicorn_expressions.ExpressionArgs.new" :
	host-func-type (goal : host-goal, env : host-environment) -> ((args : host-expression-args))

let host-shadow-environment = new-host-type(new-host-unique-id("shadow-environment"))
let host-purity = new-host-type(new-host-unique-id("purity"))
let enter-block = intrinsic
	""""
		-- wish environment.enter_block was accessible from internals
		local function enter_block(env)
			return U.notail(env:enter_block(terms.block_purity.pure))
		end
		return enter_block
	:
	host-func-type ((env : host-environment)) -> (shadowed : host-shadow-environment, inner : host-environment)
let exit-block = intrinsic
	""""
		-- wish environment.exit_block was accessible from internals
		local function exit_block(inner, term, shadowed)
			return U.notail(inner:exit_block(term, shadowed))
		end
		return exit_block
	:
	host-func-type (
			inner    : host-environment,
			term     : host-inferrable-term,
			shadowed : host-shadow-environment)
		->
		(env : host-environment, wrapped : host-inferrable-term, purity : host-purity)

let host-matcher = new-host-type-family new-host-unique-id("matcher")
	forall (userdata : host-type, result : tuple-desc-type(host-type)) -> (T : host-type)
	tuple-of-implicit contravariant(subtyping) covariant(tuple-desc-relation)

let nil-handler-type = lambda (userdata : host-type, result : tuple-desc-type(host-type))
	host-func-type ((ud : userdata)) -> (r : host-tuple-type(result))
let host-matcher-is-nil = lambda (userdata : host-type, result : tuple-desc-type(host-type), accept-handler : nil-handler-type(userdata, result))
	let inner = intrinsic "return metalanguage.isnil" :
		host-func-type ((accept-handler : nil-handler-type(userdata, result))) -> ((m : host-matcher(userdata, result)))
	let (m) = inner(accept-handler)
	m

let pair-handler-type = lambda (userdata : host-type, result : tuple-desc-type(host-type))
	host-func-type (ud : userdata, a : host-syntax, b : host-syntax) -> (r : host-tuple-type(result))
let host-matcher-is-pair = lambda (userdata : host-type, result : tuple-desc-type(host-type), accept-handler : pair-handler-type(userdata, result))
	let inner = intrinsic "return metalanguage.ispair" :
		host-func-type ((accept-handler : pair-handler-type(userdata, result))) -> ((m : host-matcher(userdata, result)))
	let (m) = inner(accept-handler)
	m

let symbol-handler-type = lambda (userdata : host-type, result : tuple-desc-type(host-type))
	host-func-type (ud : userdata, symbol : host-string) -> (r : host-tuple-type(result))
let host-matcher-is-symbol = lambda (userdata : host-type, result : tuple-desc-type(host-type), accept-handler : symbol-handler-type(userdata, result))
	let inner = intrinsic "return metalanguage.issymbol" :
		host-func-type ((accept-handler : symbol-handler-type(userdata, result))) -> ((m : host-matcher(userdata, result)))
	let (m) = inner(accept-handler)
	m

let value-handler-type = lambda (userdata : host-type, result : tuple-desc-type(host-type))
	host-func-type (ud : userdata, val : host-literal) -> (r : host-tuple-type(result))
let host-matcher-is-value = lambda (userdata : host-type, result : tuple-desc-type(host-type), accept-handler : value-handler-type(userdata, result))
	let inner = intrinsic "return metalanguage.isvalue" :
		host-func-type ((accept-handler : value-handler-type(userdata, result))) -> ((m : host-matcher(userdata, result)))
	let (m) = inner(accept-handler)
	m

let reducer-type = new-host-type-family new-host-unique-id("host-reducer")
	forall (storage : tuple-desc-type(host-type), result2 : tuple-desc-type(host-type)) -> (T : host-type)
	tuple-of-implicit contravariant(tuple-desc-relation) covariant(tuple-desc-relation)

let reducible-handler-type = lambda (userdata : host-type, result2 : tuple-desc-type(host-type), result : tuple-desc-type(host-type))
	# prepend userdata to result2
	let userdata-desc = tuple-desc-singleton(host-type, userdata)
	let params = tuple-desc-concat-indep(userdata-desc, result2)
	host-func-type (p : host-tuple-type(params)) -> (r : host-tuple-type(result))
let reducible-constructor-type = lambda (
		userdata : host-type,
		storage  : tuple-desc-type(host-type),
		result2  : tuple-desc-type(host-type),
		result   : tuple-desc-type(host-type))
	let accept-handler-type = reducible-handler-type(userdata, result2, result)
	# prepend accept-handler-type to storage
	let accept-handler-desc = tuple-desc-singleton(host-type, accept-handler-type)
	let params = tuple-desc-concat-indep(accept-handler-desc, storage)
	host-func-type (p : host-tuple-type(params)) -> ((m : host-matcher(userdata, result)))
let get-reducible-constructor = lambda (
		userdata : host-type,
		storage  : tuple-desc-type(host-type),
		result2  : tuple-desc-type(host-type),
		result   : tuple-desc-type(host-type),
		red      : reducer-type(storage, result2))
	let inner = intrinsic "return function(r) return r end" :
		host-func-type ((r : reducer-type(storage, result2))) -> ((c : reducible-constructor-type(userdata, storage, result2, result)))
	let (c) = inner(red)
	c

let host-matcher-reducible =
	lambda_implicit (userdata       : host-type)
		lambda (
				storage        : tuple-desc-type(host-type),
				result2        : tuple-desc-type(host-type),
				result         : tuple-desc-type(host-type),
				red            : reducer-type(storage, result2),
				s              : host-tuple-type(storage),
				accept-handler : reducible-handler-type(userdata, result2, result))
			# FIXME: this function resolution breaks alicorn, which is extremely very super bad
			# let c = get-reducible-constructor(userdata, storage, result2, result, red)
			let inner = intrinsic "return function(r) return r end" :
				host-func-type ((r : reducer-type(storage, result2))) -> ((c : reducible-constructor-type(userdata, storage, result2, result)))
			let (c) = inner(red)

			let accept-handler-type = reducible-handler-type(userdata, result2, result)
			let accept-handler-desc = tuple-desc-singleton(host-type, accept-handler-type)
			# let red-param-desc = tuple-desc-concat(host-type, accept-handler-desc, storage)
			# let red-result-desc = tuple-desc-singleton(host-type, host-matcher(userdata, result))

			let accept-handler-tuple = host-tuple-of(accept-handler-desc)(accept-handler)
			let red-param = host-tuple-concat(accept-handler-desc, storage, accept-handler-tuple, s)

			# look ma, no intrinsics!
			let (m) = apply(c, red-param)
			m

let failure-handler-type = lambda (userdata : host-type, result : tuple-desc-type(host-type))
	host-func-type (ud : userdata, exception : host-lua-error) -> (r : host-tuple-type(result))

let match-syntax = lambda (
		userdata        : host-type,
		result          : tuple-desc-type(host-type),
		matchers        : host-array-type(host-matcher(userdata, result)),
		failure-handler : failure-handler-type(userdata, result),
		syn             : host-syntax,
		ud              : userdata)
	let inner = intrinsic
		""""
			local function match_syntax(matchers, failure_handler, syn, ud)
				return U.notail(syn:match(matchers, failure_handler, ud))
			end
			return match_syntax
		:
		host-func-type (
				matchers        : host-array-type(host-matcher(userdata, result)),
				failure-handler : failure-handler-type(userdata, result),
				syn             : host-syntax,
				ud              : wrapped(userdata))
			->
			(r : host-tuple-type(result))
	inner(matchers, failure-handler, syn, wrap(ud))

let host-term-of-inner = intrinsic
	""""
		local function host_term_of(goal)
			if goal:is_infer() then
				return terms.host_inferrable_term_type
			elseif goal:is_check() then
				return terms.host_checkable_term_type
			else
				error("host-term-of: unknown goal")
			end
		end
		return host_term_of
	:
	host-func-type ((goal : host-goal)) -> ((t : wrapped(host-type)))
#let host-term-of-inner = hackhack-host-term-of-inner
let host-term-of = lambda (goal : host-goal)
	let (t) = host-term-of-inner(goal)
	unwrap(t)
let goalify-inferrable = intrinsic
	""""
		local function goalify_inferrable(goal, inferrable)
			if goal:is_infer() then
				return inferrable
			elseif goal:is_check() then
				return U.notail(terms.checkable_term.inferrable(inferrable))
			else
				error("goalify-inferrable: unknown goal")
			end
		end
		return goalify_inferrable
	:
	host-func-type (goal : host-goal, inferrable : host-inferrable-term) -> ((term : host-term-of(goal)))

let operative-handler-type = lambda (userdata : host-type)
	forall (syn : host-syntax, env : host-environment, ud : userdata, goal : host-goal) -> (term : host-term-of(goal), env : host-environment)

let operative-result-desc = lambda (goal : host-goal)
	# read as: (term : host-term-of(goal), env : host-environment)
	tuple-desc-concat-indep
		tuple-desc-singleton(host-type, host-term-of(goal))
		tuple-desc-singleton(host-type, host-environment)

## tuple-desc operative

let ascribed-segment-tuple-desc-reducer-thread-type = new-host-type(new-host-unique-id("ascribed-segment-tuple-desc-reducer-thread"))
let ascribed-segment-tuple-desc-reducer-thread-type-get-names = intrinsic
	""""
		local function get_names(thread)
			return thread.names
		end
		return get_names
	:
	host-func-type ((thread : ascribed-segment-tuple-desc-reducer-thread-type)) -> ((names : terms-gen-array))
let ascribed-segment-tuple-desc-reducer-thread-type-get-args = intrinsic
	""""
		local function get_args(thread)
			return thread.args
		end
		return get_args
	:
	host-func-type ((thread : ascribed-segment-tuple-desc-reducer-thread-type)) -> ((args : host-inferrable-term))
let ascribed-segment-tuple-desc-reducer-thread-type-get-env = intrinsic
	""""
		local function get_env(thread)
			return thread.env
		end
		return get_env
	:
	host-func-type ((thread : ascribed-segment-tuple-desc-reducer-thread-type)) -> ((env : host-environment))

let ascribed-segment-tuple-desc-reducer-storage-desc = tuple-desc-singleton(host-type, host-environment)

let ascribed-segment-tuple-desc-reducer-result2-desc = tuple-desc-singleton(host-type, ascribed-segment-tuple-desc-reducer-thread-type)

let ascribed-segment-tuple-desc-match-result-desc =
	# read as: (ok : host-bool, _ : host-if(ok, ascribed-segment-tuple-desc-reducer-thread-type, host-lua-error))
	# or, more logically: (ok : host-bool, ...) where:
	# - ok == true:  `...` is ascribed-segment-tuple-desc-reducer-thread-type
	# - ok == false: `...` is host-lua-error
	# technically this should have a third element in the ok == true case, containing host-syntax
	# but the syntax will always be nil, and the errors are annoying
	tuple-desc-elem-implicit
		tuple-desc-elem-explicit(host-type)
			tuple-desc-empty host-type
			lambda ()
				host-bool
		lambda (ok : host-bool)
			host-if(ok, ascribed-segment-tuple-desc-reducer-thread-type, host-lua-error)

# FIXME: ascribed_segment_tuple_desc can only produce tuple descs in star-0
let ascribed-segment-tuple-desc-reducer = intrinsic "return base_env.ascribed_segment_tuple_desc" :
	reducer-type(ascribed-segment-tuple-desc-reducer-storage-desc, ascribed-segment-tuple-desc-reducer-result2-desc)

let ascribed-segment-tuple-desc-match-accept-handler = intrinsic "return metalanguage.accept_handler" :
	reducible-handler-type(host-unit, ascribed-segment-tuple-desc-reducer-result2-desc, ascribed-segment-tuple-desc-match-result-desc)
let ascribed-segment-tuple-desc-match-failure-handler = intrinsic "return metalanguage.failure_handler" :
	failure-handler-type(host-unit, ascribed-segment-tuple-desc-match-result-desc)

let tuple-desc-impl-type = operative-handler-type(host-unit)

let error-filter = lambda (Tt : host-type, Tf : host-type, ok : host-bool, val-or-err : host-if(ok, Tt, Tf))
	let inner = intrinsic
		""""
			local function error_filter(ok, val_or_err)
				if not ok then
					error(val_or_err)
				end
				return val_or_err
			end
			return error_filter
		:
		host-func-type (ok : host-bool, val-or-err : host-if(ok, Tt, Tf)) -> ((val : Tt))
	let (val) = inner(ok, val-or-err)
	val

let tuple-desc-impl = lambda (syn : host-syntax, env : host-environment, ud : host-unit, goal : host-goal)
	let s = host-tuple-of(ascribed-segment-tuple-desc-reducer-storage-desc)(env)

	let matcher-t = host-matcher(host-unit, ascribed-segment-tuple-desc-match-result-desc)
	let matcher =
		host-matcher-reducible
			ascribed-segment-tuple-desc-reducer-storage-desc
			ascribed-segment-tuple-desc-reducer-result2-desc
			ascribed-segment-tuple-desc-match-result-desc
			ascribed-segment-tuple-desc-reducer
			s
			ascribed-segment-tuple-desc-match-accept-handler

	let matchers =
		host-array-set
			host-array-new matcher-t
			1
			matcher

	let (ok, thread) =
		match-syntax
			host-unit
			ascribed-segment-tuple-desc-match-result-desc
			matchers
			ascribed-segment-tuple-desc-match-failure-handler
			syn
			host-nil

	let thread = error-filter(ascribed-segment-tuple-desc-reducer-thread-type, host-lua-error, ok, thread)

	let (args) = ascribed-segment-tuple-desc-reducer-thread-type-get-args(thread)
	let (env) = ascribed-segment-tuple-desc-reducer-thread-type-get-env(thread)

	let (args) = goalify-inferrable(goal, args)

	tuple-of(host-type, operative-result-desc(goal))(args, env)

let core-operative-type =
	unwrap
		intrinsic
			""""
				return base_env.core_operative_type
			:
			wrapped(forall (userdata : host-type, handler : operative-handler-type(userdata)) -> (res : host-type))


let core-operative = lambda_implicit (userdata : host-type)
	unwrap
		intrinsic
			""""
				return base_env.core_operative
			:
			wrapped(forall (ud : userdata, handler : operative-handler-type(userdata)) -> (res : core-operative-type(userdata, handler)))

#let (tuple-desc-op-type, tuple-desc) = new-operative(host-unit, host-nil, tuple-desc-impl)
let tuple-desc = core-operative(host-nil, tuple-desc-impl)
# tuple-desc for single-element tuples currently require an extra pair of parens, like lambdas used to.
# This should eventually be fixed the same way lambdas were fixed.

let host-tuple-to-tuple =
	lambda_implicit (desc : tuple-desc-type(host-type))
		lambda (xs : host-tuple-type(desc))
			let inner = intrinsic
				""""
					return function(val)
						local elems = val:unwrap_host_tuple_value()
						local vals = terms_gen.declare_array(terms.strict_value)()
						for _, v in ipairs(elems) do
							vals:append(terms.strict_value.host_value(v))
						end
						return U.notail(terms.strict_value.tuple_value(vals))
					end
				:
				host-func-type ((
						val   : wrapped(host-tuple-type(desc))))
					->
					((res : wrapped(tuple-type(desc))))
			let (res) = inner(wrap(xs))
			the tuple-type(desc) unwrap(res)

let func-to-host-func =
	lambda_curry (arg-desc : tuple-desc-type(host-type), res-desc : (forall (x : tuple-type(arg-desc)) -> (r : tuple-desc-type(host-type))))
		let ft = forall (args : tuple-type(arg-desc)) -> (res : tuple-type(apply(res-desc, args)))
		let hft = host-func-type (args : host-tuple-type(arg-desc)) -> (res : host-tuple-type(apply(res-desc, host-tuple-to-tuple(args))))
		lambda (f : ft)
			let inner = intrinsic
				""""
					return function(afn)
						return function(...)
							local args = table.pack(...)
							local conv_args = terms_gen.declare_array(terms.flex_value)()
							for i = 1, args.n do
								conv_args:append(terms.flex_value.host_value(args[i]))
							end
							local res = evaluator.apply_value(terms.flex_value.strict(afn), terms.flex_value.tuple_value(conv_args), terms.typechecking_context())
							if not res:is_tuple_value() then
								error "alicorn function converted to native function has failed to create a real value"
							end
							local elems = {}
							for i, v in res:unwrap_tuple_value():ipairs() do
								elems[i] = v:unwrap_host_value()
							end
							return table.unpack(elems)
						end
					end
				:
				host-func-type ((arg : wrapped(ft))) -> ((res : hft))
			let (res) = inner(wrap(f))
			the hft res

##### GLSL PRELUDE START HERE #####

let glsl-float = host-number
let glsl-vec2 = new-host-type(new-host-unique-id("glsl-vec2"))
let glsl-vec3 = new-host-type(new-host-unique-id("glsl-vec3"))
let glsl-vec4 = new-host-type(new-host-unique-id("glsl-vec4"))
let glsl-mat4 = new-host-type(new-host-unique-id("glsl-mat4"))

let host-add-float = intrinsic
	""""
		local host_add_float = function(l, r) return l + r end
		glsl_registry[host_add_float] = function(pp, varnames, l, r)
			pp:unit("(")
			pp:any(l, varnames)
			pp:unit(" + ")
			pp:any(r, varnames)
			pp:unit(")")
		end
		return host_add_float
	:
	host-func-type (left : glsl-float, right : glsl-float) -> ((sum : glsl-float))
let _+_ = lambda (left : glsl-float, right : glsl-float)
	let (sum) = host-add-float(left, right)
	sum

let host-sub-float = intrinsic
	""""
		local host_sub_float = function(l, r) return l - r end
		glsl_registry[host_sub_float] = function(pp, varnames, l, r)
			pp:unit("(")
			pp:any(l, varnames)
			pp:unit(" - ")
			pp:any(r, varnames)
			pp:unit(")")
		end
		return host_sub_float
	:
	host-func-type (left : glsl-float, right : glsl-float) -> ((difference : glsl-float))
let _-_ = lambda (left : glsl-float, right : glsl-float)
	let (difference) = host-sub-float(left, right)
	difference

let host-mul-float = intrinsic
	""""
		local host_mul_float = function(l, r) return l * r end
		glsl_registry[host_mul_float] = function(pp, varnames, l, r)
			pp:unit("(")
			pp:any(l, varnames)
			pp:unit(" * ")
			pp:any(r, varnames)
			pp:unit(")")
		end
		return host_mul_float
	:
	host-func-type (left : glsl-float, right : glsl-float) -> ((product : glsl-float))
let _*_ = lambda (left : glsl-float, right : glsl-float)
	let (product) = host-mul-float(left, right)
	product

let host-mk-vec2 = intrinsic
	""""
		local vec2_mt = {}
		local host_mk_vec2 = function(x, y) return setmetatable({ x = x, y = y }, vec2_mt) end
		glsl_registry[host_mk_vec2] = function(pp, varnames, x, y)
			pp:unit("vec2(")
			pp:any(x, varnames)
			pp:unit(", ")
			pp:any(y, varnames)
			pp:unit(")")
		end
		glsl_registry[vec2_mt] = function(pp, vec, varnames)
			return glsl_registry[host_mk_vec2](pp, varnames, vec.x, vec.y)
		end
		return host_mk_vec2
	:
	host-func-type (x : glsl-float, y : glsl-float) -> ((vec : glsl-vec2))
let mk-vec2 = lambda (x : glsl-float, y : glsl-float)
	let (vec) = host-mk-vec2(x, y)
	vec

let host-mk-vec3 = intrinsic
	""""
		local vec3_mt = {}
		local host_mk_vec3 = function(x, y) return setmetatable({ x = x, y = y, z = z }, vec3_mt) end
		glsl_registry[host_mk_vec3] = function(pp, varnames, x, y, z)
			pp:unit("vec3(")
			pp:any(x, varnames)
			pp:unit(", ")
			pp:any(y, varnames)
			pp:unit(", ")
			pp:any(z, varnames)
			pp:unit(")")
		end
		glsl_registry[vec3_mt] = function(pp, vec, varnames)
			return glsl_registry[host_mk_vec3](pp, varnames, vec.x, vec.y, vec.z)
		end
		return host_mk_vec3
	:
	host-func-type (x : glsl-float, y : glsl-float, z : glsl-float) -> ((vec : glsl-vec3))
let mk-vec3 = lambda (x : glsl-float, y : glsl-float, z : glsl-float)
	let (vec) = host-mk-vec3(x, y, z)
	vec

let host-mk-vec4 = intrinsic
	""""
		local vec4_mt = {}
		local host_mk_vec4 = function(x, y, z, w) return setmetatable({ x = x, y = y, z = z, w = w }, vec4_mt) end
		glsl_registry[host_mk_vec4] = function(pp, varnames, x, y, z, w)
			pp:unit("vec4(")
			pp:any(x, varnames)
			pp:unit(", ")
			pp:any(y, varnames)
			pp:unit(", ")
			pp:any(z, varnames)
			pp:unit(", ")
			pp:any(w, varnames)
			pp:unit(")")
		end
		glsl_registry[vec4_mt] = function(pp, vec, varnames)
			return glsl_registry[host_mk_vec4](pp, varnames, vec.x, vec.y, vec.z, vec.w)
		end
		return host_mk_vec4
	:
	host-func-type (x : glsl-float, y : glsl-float, z : glsl-float, w : glsl-float) -> ((vec : glsl-vec4))
let mk-vec4 = lambda (x : glsl-float, y : glsl-float, z : glsl-float, w : glsl-float)
	let (vec) = host-mk-vec4(x, y, z, w)
	vec

let host-mk-mat4 = intrinsic
	""""
		local mat4_mt = {}
		local host_mk_mat4 = function(a, b, c, d)
			return setmetatable({
				ax = a.x, bx = b.x, cx = c.x, dx = d.x,
				ay = a.y, by = b.y, cy = c.y, dy = d.y,
				az = a.z, bz = b.z, cz = c.z, dz = d.z,
				aw = a.w, bw = b.w, cw = c.w, dw = d.w,
			}, mat4_mt)
		end
		glsl_registry[host_mk_mat4] = function(pp, varnames, a, b, c, d)
			pp:unit("mat4(")
			pp:any(a, varnames)
			pp:unit(", ")
			pp:any(b, varnames)
			pp:unit(", ")
			pp:any(c, varnames)
			pp:unit(", ")
			pp:any(d, varnames)
			pp:unit(")")
		end
		glsl_registry[mat4_mt] = function(pp, mat, varnames)
			pp:unit("/* NYI: repr a mat4! */")
		end
		return host_mk_mat4
	:
	host-func-type (a : glsl-vec4, b : glsl-vec4, c : glsl-vec4, d : glsl-vec4) -> ((mat : glsl-mat4))
let mk-mat4 = lambda (a : glsl-vec4, b : glsl-vec4, c : glsl-vec4, d : glsl-vec4)
	let (mat) = host-mk-mat4(a, b, c, d)
	mat

let host-get-vec2-x = intrinsic
	""""
		local host_get_vec2_x = function(vec) return vec.x end
		glsl_registry[host_get_vec2_x] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".x")
		end
		return host_get_vec2_x
	:
	host-func-type ((vec : glsl-vec2)) -> ((x : glsl-float))
let host-get-vec2-y = intrinsic
	""""
		local host_get_vec2_y = function(vec) return vec.y end
		glsl_registry[host_get_vec2_y] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".y")
		end
		return host_get_vec2_y
	:
	host-func-type ((vec : glsl-vec2)) -> ((y : glsl-float))
let split-vec2 = lambda (vec : glsl-vec2)
	let (x) = host-get-vec2-x(vec)
	let (y) = host-get-vec2-y(vec)
	tuple-of-implicit(x, y)


let host-get-vec3-x = intrinsic
	""""
		local host_get_vec3_x = function(vec) return vec.x end
		glsl_registry[host_get_vec3_x] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".x")
		end
		return host_get_vec3_x
	:
	host-func-type ((vec : glsl-vec3)) -> ((x : glsl-float))
let host-get-vec3-y = intrinsic
	""""
		local host_get_vec3_y = function(vec) return vec.y end
		glsl_registry[host_get_vec3_y] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".y")
		end
		return host_get_vec3_y
	:
	host-func-type ((vec : glsl-vec3)) -> ((y : glsl-float))
let host-get-vec3-z = intrinsic
	""""
		local host_get_vec3_z = function(vec) return vec.z end
		glsl_registry[host_get_vec3_z] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".z")
		end
		return host_get_vec3_z
	:
	host-func-type ((vec : glsl-vec3)) -> ((z : glsl-float))
let split-vec3 = lambda (vec : glsl-vec3)
	let (x) = host-get-vec3-x(vec)
	let (y) = host-get-vec3-y(vec)
	let (z) = host-get-vec3-z(vec)
	tuple-of-implicit(x, y, z)

let host-get-vec4-x = intrinsic
	""""
		local host_get_vec4_x = function(vec) return vec.x end
		glsl_registry[host_get_vec4_x] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".x")
		end
		return host_get_vec4_x
	:
	host-func-type ((vec : glsl-vec4)) -> ((x : glsl-float))
let host-get-vec4-y = intrinsic
	""""
		local host_get_vec4_y = function(vec) return vec.y end
		glsl_registry[host_get_vec4_y] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".y")
		end
		return host_get_vec4_y
	:
	host-func-type ((vec : glsl-vec4)) -> ((y : glsl-float))
let host-get-vec4-z = intrinsic
	""""
		local host_get_vec4_z = function(vec) return vec.z end
		glsl_registry[host_get_vec4_z] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".z")
		end
		return host_get_vec4_z
	:
	host-func-type ((vec : glsl-vec4)) -> ((z : glsl-float))
let host-get-vec4-w = intrinsic
	""""
		local host_get_vec4_w = function(vec) return vec.w end
		glsl_registry[host_get_vec4_w] = function(pp, varnames, vec)
			pp:any(vec, varnames)
			pp:unit(".w")
		end
		return host_get_vec4_w
	:
	host-func-type ((vec : glsl-vec4)) -> ((w : glsl-float))
let split-vec4 = lambda (vec : glsl-vec4)
	let (x) = host-get-vec4-x(vec)
	let (y) = host-get-vec4-y(vec)
	let (z) = host-get-vec4-z(vec)
	let (w) = host-get-vec4-w(vec)
	tuple-of-implicit(x, y, z, w)

let host-mul-mat4-vec4 = intrinsic
	""""
		local host_mul_mat4_vec4 = function(left, right)
			return setmetatable({
				x = left.ax * right.x + left.bx * right.y + left.cx * right.z + left.dx * right.w,
				y = left.ay * right.x + left.by * right.y + left.cy * right.z + left.dy * right.w,
				z = left.az * right.x + left.bz * right.y + left.cz * right.z + left.dz * right.w,
				w = left.aw * right.x + left.bw * right.y + left.cw * right.z + left.dw * right.w,
			}, glsl_registry["vec4"])
		end
		glsl_registry[host_mul_mat4_vec4] = function(pp, varnames, left, right)
			pp:unit("(")
			pp:any(left, varnames)
			pp:unit(" * ")
			pp:any(right, varnames)
			pp:unit(")")
		end
		return host_mul_mat4_vec4
	:
	host-func-type (left : glsl-mat4, right : glsl-vec4) -> ((product : glsl-vec4))
let mul-mat4-vec4 = lambda (left : glsl-mat4, right : glsl-vec4)
	let (product) = host-mul-mat4-vec4(left, right)
	product

let host-mul-mat4-mat4 = intrinsic
	""""
		local host_mul_mat4_mat4 = function(left, right)
			return setmetatable({
				ax = left.ax * right.ax + left.bx * right.ay + left.cx * right.az + left.dx * right.aw,
				ay = left.ay * right.ax + left.by * right.ay + left.cy * right.az + left.dy * right.aw,
				az = left.az * right.ax + left.bz * right.ay + left.cz * right.az + left.dz * right.aw,
				aw = left.aw * right.ax + left.bw * right.ay + left.cw * right.az + left.dw * right.aw,

				bx = left.ax * right.bx + left.bx * right.by + left.cx * right.bz + left.dx * right.bw,
				by = left.ay * right.bx + left.by * right.by + left.cy * right.bz + left.dy * right.bw,
				bz = left.az * right.bx + left.bz * right.by + left.cz * right.bz + left.dz * right.bw,
				bw = left.aw * right.bx + left.bw * right.by + left.cw * right.bz + left.dw * right.bw,

				cx = left.ax * right.cx + left.bx * right.cy + left.cx * right.cz + left.dx * right.cw,
				cy = left.ay * right.cx + left.by * right.cy + left.cy * right.cz + left.dy * right.cw,
				cz = left.az * right.cx + left.bz * right.cy + left.cz * right.cz + left.dz * right.cw,
				cw = left.aw * right.cx + left.bw * right.cy + left.cw * right.cz + left.dw * right.cw,

				dx = left.ax * right.dx + left.bx * right.dy + left.cx * right.dz + left.dx * right.dw,
				dy = left.ay * right.dx + left.by * right.dy + left.cy * right.dz + left.dy * right.dw,
				dz = left.az * right.dx + left.bz * right.dy + left.cz * right.dz + left.dz * right.dw,
				dw = left.aw * right.dx + left.bw * right.dy + left.cw * right.dz + left.dw * right.dw,
			}, glsl_registry["mat4"])
		end
		glsl_registry[host_mul_mat4_mat4] = function(pp, varnames, left, right)
			pp:unit("(")
			pp:any(left, varnames)
			pp:unit(" * ")
			pp:any(right, varnames)
			pp:unit(")")
		end
		return host_mul_mat4_mat4
	:
	host-func-type (left : glsl-mat4, right : glsl-mat4) -> ((product : glsl-mat4))
let mul-mat4-mat4 = lambda (left : glsl-mat4, right : glsl-mat4)
	let (product) = host-mul-mat4-mat4(left, right)
	product

let string = host-string

#	---@alias URect userdata
let URect = new-host-type(new-host-unique-id("URect"))

#	---@alias Component userdata
let Component = new-host-type(new-host-unique-id("Component"))

#	---@alias EventHandler userdata
let EventHandler = new-host-type(new-host-unique-id("EventHandler"))

let FeatherID = new-host-type(new-host-unique-id("FeatherID"))

####
	---@param left number
	---@param top number
	---@param right number
	---@param bottom number
	---@param rel_left number
	---@param rel_top number
	---@param rel_right number
	---@param rel_bottom number
	---@return URect
	function create_urect(left, top, right, bottom, rel_left, rel_top, rel_right, rel_bottom)
	end
let create-urect-bind =
	intrinsic
		"return create_urect"
		:
		host-func-type
			(
				left : host-number,
				top : host-number,
				right : host-number,
				bottom : host-number,
				rel_left : host-number,
				rel_top : host-number,
				rel_right : host-number,
				rel_bottom : host-number
			)
			->
			((res : URect))
let create-urect =
	lambda
		(
			left : host-number,
			top : host-number,
			right : host-number,
			bottom : host-number,
			rel_left : host-number,
			rel_top : host-number,
			rel_right : host-number,
			rel_bottom : host-number
		)
		let (res) = create-urect-bind(left, top, right, bottom, rel_left, rel_top, rel_right, rel_bottom)
		res

let create-id-bind =
	intrinsic "return create_id" : (host-func-type ((id  : string)) -> ((res  : FeatherID)))
let create-id = lambda (id  : string)
	let  (res)  = create-id-bind(id)
	res

####
	---@param name string
	---@param child Component
	---@return Component
	function create_window(name, child) end
let create-window-bind =
	intrinsic
		"return create_window"
		:
		host-func-type (id : FeatherID, name : string, child : Component) -> ((res : Component))
let create-window =
	lambda (id : FeatherID, name : string, child : Component)
		let (res) = create-window-bind(id, name, child)
		res
####
	---@param area URect
	---@param ... Component
	---@return Component
	function create_region(area, ...) end
let create-region-bind =
	intrinsic
		""""
			return function(id, area, components) print('inside create-region', components) return create_region(id, area, components) end
		:
		host-func-type (id : FeatherID, area : URect, components : host-array-type(Component)) -> ((res : Component))

let create-region =
	lambda (id : FeatherID, area : URect, components : host-array-type(Component))
		let (res) = create-region-bind(id, area, components)
		res

####
	---@param area URect
	---@param text string
	---@param onclick EventHandler
	---@param background Component
	---@return Component
	function create_button(area, text, onclick, background) end
let create-button-bind =
	intrinsic
		"return create_button"
		:
		host-func-type (id : FeatherID, area : URect, text : string, onclick : EventHandler, background : Component) -> ((res : Component))
let create-button =
	lambda (id : FeatherID, area : URect, text : string, onclick : EventHandler, background : Component)
		let (res) = create-button-bind(id, area, text, onclick, background)
		res
####
	---@param area URect
	---@param text string
	---@return Component
	function create_label(area, text) end
let create-label-bind =
	intrinsic "return create_label" : (host-func-type (id : FeatherID, area : URect, text : string) -> ((res : Component)))

let create-label =
	lambda (id : FeatherID, area : URect, text : string)
		let (res) = create-label-bind(id, area, text)
		res

####
	---Colors here are 32-bit RGBA integers (for now): 0xFF00FFFF
	---@param area URect
	---@param color integer
	---@param radius number
	---@param border number
	---@param bordercolor integer
	---@return Component
	function create_round_rect(area, color, radius, border, bordercolor) end
let create-round-rect-bind =
	intrinsic
		"return create_round_rect"
		:
		host-func-type (id : FeatherID, area : URect, color : host-number, radius : host-number, border : host-number, bordercolor : host-number) -> ((res : Component))
let create-round-rect =
	lambda (id : FeatherID, area : URect, color : host-number, radius : host-number, border : host-number, bordercolor : host-number)
		let (res) = create-round-rect-bind(id, area, color, radius, border, bordercolor)
		res

let windowsig = host-func-type (store : host-unit, appstate : host-unit) -> (store : host-unit, window : Component)
let initsig = host-func-type () -> ((res : host-unit))
let onclicksig = host-func-type (dispatch : host-unit, state : host-unit) -> ((result : host-unit))

let uidesc = tuple-desc(
	window : windowsig,
	init : initsig,
	onclick :  onclicksig)

let windowmaker = lambda (store : host-unit, appstate : host-unit)
	let urect = create-urect(0.0, 0.0, 1280.0, 720.0, 0.0, 0.0, 1280.0, 720.0)
	let components = host-array-new(Component)
	let components = host-array-set(components, 1, create-label(create-id("hello-label"), urect, "Hello World, from alicorn in feather!"))
	let region = create-region(create-id("main-region"), urect, components)
	let window = create-window(create-id("main-window"), "Hello World, from alicorn in feather!", region)
	tuple-of-implicit store window

let init = lambda ()
	tuple-of-implicit host-nil

let onclick = lambda (dispatch  : host-unit, state  : host-unit)
	tuple-of-implicit host-nil

let res =
	host-tuple-of(uidesc)
		func-to-host-func
			windowmaker
		func-to-host-func
			init
		func-to-host-func
			onclick

res