cmake_minimum_required(VERSION 3.13.4)
project(fgOpenGL LANGUAGES C CXX VERSION 0.1.0)

find_package(OpenGL REQUIRED)

if(MSVC)
  string(REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
else()
  string(REPLACE "-fexceptions" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
endif()

file(GLOB_RECURSE fgOpenGL_SOURCES "./*.cpp")
list(APPEND fgOpenGL_SOURCES "glad.c")

if(MSVC)
  file(GLOB_RECURSE fgOpenGL_HEADERS "./*.hpp")
  list(APPEND fgOpenGL_HEADERS "glad/glad.h" "glad/khrplatform.h")
  add_library(fgOpenGL SHARED ${fgOpenGL_SOURCES} ${fgOpenGL_HEADERS})
  target_link_options(fgOpenGL PRIVATE "$<$<CONFIG:Release>:/LTCG>")
else()
  add_library(fgOpenGL SHARED ${fgOpenGL_SOURCES})
endif()

set_property(TARGET fgOpenGL PROPERTY C_STANDARD 17)
set_property(TARGET fgOpenGL PROPERTY CXX_STANDARD 20)
set_property(TARGET fgOpenGL PROPERTY CXX_EXTENSIONS OFF)
set_property(TARGET fgOpenGL PROPERTY CXX_STANDARD_REQUIRED ON)
set_property(TARGET fgOpenGL PROPERTY VERBOSE_MAKEFILE TRUE)

retarget_output(fgOpenGL)
target_include_directories(fgOpenGL PUBLIC ${CMAKE_SOURCE_DIR}/include)
target_include_directories(fgOpenGL PUBLIC ${PROJECT_SOURCE_DIR})

if(MSVC)
  target_compile_options(fgOpenGL PRIVATE /Zc:preprocessor $<$<CONFIG:Release>:/Oi /Ot /GL> ${CPP_WARNINGS})
else()
  target_compile_options(fgOpenGL PRIVATE -pedantic -fno-exceptions -fno-rtti $<IF:$<CONFIG:Debug>,-g -DDEBUG -msse -msse2 -O0,-O3 -msse -msse2 -msse3 -mmmx -m3dnow -mcx16 -DNDEBUG> ${CPP_WARNINGS})
endif()

if(WIN32)
  find_package(mimalloc CONFIG REQUIRED)
  target_include_directories(fgOpenGL PRIVATE ${OPENGL_INCLUDE_DIRS})
else()
  target_include_directories(fgOpenGL PRIVATE ${OPENGL_INCLUDE_DIRS})
endif()

if(WIN32)
  target_link_libraries(fgOpenGL PRIVATE ${OPENGL_LIBRARIES} mimalloc-static winmm.lib)
else()
  target_link_libraries(fgOpenGL PRIVATE ${CMAKE_DL_LIBS} ${OPENGL_LIBRARIES})
endif()