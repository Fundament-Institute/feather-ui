# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 Fundament Research Institute <https://fundament.institute>

let host-number-to-string = intrinsic "return function(a) return tostring(a) end" :
	host-func-type ((a : host-number)) -> ((c : host-string))

############# SHADER DEFINITIONS

let frag-shader-type = forall (pos : wgpu-vec2, PosDim : wgpu-vec4, DimBorderBlur : wgpu-vec4, Corners : wgpu-vec4, Fill : wgpu-vec4, Outline : wgpu-vec4) -> ((glfragcolor : wgpu-vec4))

let check-frag-shader = intrinsic
	""""
		local glsl = require "glsl-print"
		return function(frag_shader)
			local param_name, code, capture, _capture_debug, _param_debug = frag_shader:unwrap_closure()
			local elements = code:unwrap_tuple_cons()
			local glfragcolor_term = elements[1]
			local glfragcolor_check = glsl.glsl_trait:get(terms.typed_term).glsl_check(glfragcolor_term)
			return glfragcolor_check
		end
	:
	host-func-type ((frag-shader : wrapped(frag-shader-type))) -> ((valid : host-bool))
let frag-shader-valid = lambda (shader : wrapped(frag-shader-type)) #TODO make friendlier non-intrinsic wrappers of the rest of the api and remove wrapping
	let (checkres) = check-frag-shader(shader)
	host-if(checkres, host-unit, wrapped(void))

let wgpu-print-frag-shader = intrinsic
	""""
		return function(frag_shader, _valid)
			local param_name, code, capture, _capture_dbg, _param_debug = frag_shader:unwrap_closure()
			local elements = code:unwrap_tuple_cons()
			local glfragcolor = elements[1]:glsl_print({{}, {"pos", "PosDim", "DimBorderBlur", "Corners", "Fill", "Outline"}})
			local boilerplate = "@group(0) @binding(1)\nvar<uniform> PosDim: vec4f;\n@group(0) @binding(2) \nvar<uniform> DimBorderBlur: vec4f;\n@group(0) @binding(3) \nvar<uniform> Corners: vec4f;\n@group(0) @binding(4) \nvar<uniform> Fill: vec4f;\n@group(0) @binding(5) \nvar<uniform> Outline: vec4f;"
			local frag_shader = boilerplate .. "@fragment \nfn main(@location(0) pos: vec2f) -> @location(0) vec4f {\n return " .. glfragcolor .. ";\n}\n"
			return frag_shader
		end
	:	
	host-func-type (frag-shader : wrapped(frag-shader-type), valid : frag-shader-valid(frag-shader)) -> ((str : host-string))

let linearstep = lambda (low : wgpu-float, high : wgpu-float, x : wgpu-float)
	clamp((x - low) / (high - low), 0, 1)

let rectangle = lambda (samplePosition : wgpu-vec2, halfSize : wgpu-vec2, edges : wgpu-vec4)
	let (samplePosition-x, samplePosition-y) = split-vec2(samplePosition)
	let (edges-x, edges-y, edges-z, edges-w) = split-vec4(edges)
	let edge = ternary (samplePosition-x > 0)
		ternary(samplePosition-y < 0, edges-y, edges-z)
		ternary(samplePosition-y < 0, edges-x, edges-w)
	let componentWiseEdgeDistance = add-vec2
		sub-vec2(abs-vec2(samplePosition), halfSize)
		mk-vec2(edge, edge)
	
	let (componentWiseEdgeDistance-x, componentWiseEdgeDistance-y) = split-vec2(componentWiseEdgeDistance)
	let outsideDistance = length(mk-vec2(max(componentWiseEdgeDistance-x, 0.0), max(componentWiseEdgeDistance-y, 0.0)))
	let insideDistance = min(max(componentWiseEdgeDistance-x, componentWiseEdgeDistance-y), 0.0)
	outsideDistance + insideDistance - edge

let rect-frag-shader = lambda (pos : wgpu-vec2, PosDim : wgpu-vec4, DimBorderBlur : wgpu-vec4, Corners : wgpu-vec4, Fill : wgpu-vec4, Outline : wgpu-vec4)
	let (PosDim-x, PosDim-y, PosDim-z, PosDim-w) = split-vec4(PosDim)
	let (DimBorderBlur-x, DimBorderBlur-y, DimBorderBlur-z, DimBorderBlur-w) = split-vec4(DimBorderBlur)
	let (pos-x, pos-y) = split-vec2(pos)

	let w = fwidth((PosDim-z * pos-x)) * 0.5 * (1.0 + DimBorderBlur-w);
	let uv = mk-vec2((pos-x * PosDim-z) - (PosDim-z * 0.5), (pos-y * PosDim-w) - (PosDim-w * 0.5))

	let dist = rectangle(uv, mk-vec2(PosDim-z * 0.5, PosDim-w * 0.5), Corners);
	let alpha = linearstep(w, w * -1.0, dist)
	let s = linearstep(w, w * -1.0, dist + DimBorderBlur-z)

	let (Fill-r, Fill-g, Fill-b, Fill-a) = split-vec4(Fill)
	let (Outline-r, Outline-g, Outline-b, Outline-a) = split-vec4(Outline)
	let c = clamp(alpha - s, 0.0, 1.0)

	let premultiply-fill = mk-vec4(Fill-r * Fill-a * s, Fill-g * Fill-a * s, Fill-b * Fill-a * s, Fill-a * s)
	let premultiply-outline = mk-vec4(Outline-r * Outline-a * c, Outline-g * Outline-a * c, Outline-b * Outline-a * c, Outline-a * c)
	let output = add-vec4(premultiply-fill, premultiply-outline)
	tuple-of(output)

let (rect-frag-shader-string) = wgpu-print-frag-shader(wrap(rect-frag-shader), host-nil)

let line-to-point = lambda (p1 : wgpu-vec2, p2 : wgpu-vec2, p : wgpu-vec2)
	let n = sub-vec2(p2, p1)
	let (n-x, n-y) = split-vec2(n)
	dot(normalize(mk-vec2(n-y, -1.0 * n-x)), sub-vec2(p1, p))

let triangle-frag-shader = lambda (pos : wgpu-vec2, PosDim : wgpu-vec4, DimBorderBlur : wgpu-vec4, Corners : wgpu-vec4, Fill : wgpu-vec4, Outline : wgpu-vec4)
	let (PosDim-x, PosDim-y, PosDim-z, PosDim-w) = split-vec4(PosDim)
	let (Corners-x, Corners-y, Corners-z, Corners-w) = split-vec4(Corners)
	let (DimBorderBlur-x, DimBorderBlur-y, DimBorderBlur-z, DimBorderBlur-w) = split-vec4(DimBorderBlur)
	let d = mk-vec2(PosDim-z, PosDim-w)
	let (d-x, d-y) = split-vec2(d)
	let p = add-vec2(pos :*: d, mk-vec2(-0.5 , 0.5))
	let p2 = mk-vec2(Corners-w * d-x, 0.0)
	let r1 = line-to-point(p2, mk-vec2(0.0, d-y), p)
	let r2 = -1.0 * line-to-point(p2, d, p)
	let (p-x, p-y) = split-vec2(p)
	let r = max(max(r1, r2), p-y - d-y)

	let w = fwidth(p-x) * (1.0 + DimBorderBlur-w)
	let s = 1.0 - linearstep(1.0 - DimBorderBlur-z - w * 2.0, 1.0 - DimBorderBlur-z - w, r)
	let alpha = linearstep(1.0 - w, 1.0 - w * 2.0, r)  
	let (Fill-r, Fill-g, Fill-b, Fill-a) = split-vec4(Fill)
	let (Outline-r, Outline-g, Outline-b, Outline-a) = split-vec4(Outline)
	let fill-alpha = mul-vec4(mk-vec4(Fill-r, Fill-g, Fill-b, 1.0), mk-vec4-float(Fill-a * s))
	let outline-alpha = mul-vec4(mk-vec4(Outline-r, Outline-g, Outline-b, 1.0), mk-vec4-float(Outline-a * clamp(alpha - s,0.0,1.0)))
	let output = add-vec4(fill-alpha, outline-alpha)
	tuple-of(output)

let (tri-frag-shader-string) = wgpu-print-frag-shader(wrap(triangle-frag-shader), host-nil)

let circle-frag-shader = lambda (pos : wgpu-vec2, PosDim : wgpu-vec4, DimBorderBlur : wgpu-vec4, Corners : wgpu-vec4, Fill : wgpu-vec4, Outline : wgpu-vec4)
	let (PosDim-x, PosDim-y, PosDim-z, PosDim-w) = split-vec4(PosDim)
	let (Corners-x, Corners-y, Corners-z, Corners-w) = split-vec4(Corners)
	let (DimBorderBlur-x, DimBorderBlur-y, DimBorderBlur-z, DimBorderBlur-w) = split-vec4(DimBorderBlur)
	let l = (PosDim-z + PosDim-w) * 0.5
	let (pos-x, pos-y) = split-vec2(pos)
	let uv = sub-vec2(mk-vec2(pos-x * 2.0, pos-y * 2.0), mk-vec2-float(1.0))
	let w1 = (1.0 + DimBorderBlur-w) * fwidth(pos-x) 

	let border = (DimBorderBlur-z / l) * 2.0
	let t = 0.50 - (Corners-x / l)
	let r = 1.0 - t - w1

	let inner = (Corners-y / l) * 2.0
	let pre = length(uv) - r + (border * 0.5) - (inner * 0.5)
	let abspre = abs(pre)
	let d0 = abspre - t + (border * 0.5) + (inner * 0.5)
	let d1pre = length(uv) - r
	let d1 = abs(d1pre) - t
	let s = pow(linearstep(w1 * 2.0, 0.0, d0), 2.2)
	let alpha = pow(linearstep(w1 * 2.0, 0.0, d1), 2.2)

	let (Fill-r, Fill-g, Fill-b, Fill-a) = split-vec4(Fill)
	let (Outline-r, Outline-g, Outline-b, Outline-a) = split-vec4(Outline)
	
	let fill-alpha = mul-vec4(mk-vec4(Fill-r, Fill-g, Fill-b, 1.0), mk-vec4-float(Fill-a * s))
	let outline-alpha = mul-vec4(mk-vec4(Outline-r, Outline-g, Outline-b, 1.0), mk-vec4-float(Outline-a * clamp(alpha - s, 0.0, 1.0)))
	let output = add-vec4(fill-alpha, outline-alpha)
	tuple-of(output)

let (circle-frag-shader-string) = wgpu-print-frag-shader(wrap(circle-frag-shader), host-nil)

############# FEATHER LAYOUT STARTS HERE

# We start by binding our feather types to Rust interface that's been exposed via our lua bindings in feather.
# First we declare some new opaque types that feather will be manipulating entirely via the lua bindings, without
# knowing what's inside the types. This includes our URect, a rectangle with a absolute and relative coordinates, 
# the Component, which is the underlying trait that all feather outlines satisfy (like buttons or labels), and
# an event handler, which is used to capture mouse input.

let string = host-string

#	---@alias URect userdata
let URect = new-host-type(new-host-unique-id("URect"))

#	---@alias Component userdata
let Component = new-host-type(new-host-unique-id("Component"))

#	---@alias EventHandler userdata
let EventHandler = new-host-type(new-host-unique-id("EventHandler"))

# We also define an ID type, which is intended to uniquely identify every component. This will be used for
# referencing components from inside each other.

let FeatherID = new-host-type(new-host-unique-id("FeatherID"))

# Each pair of functions here binds an alicorn function to a lua function. The first function assigns a type
# to the lua function intrinsic, and the second function creates an alicorn-friendly function that then calls
# the lua intrinsic. We repeat this for every function we have exposed through the lua interface.

####
	---@param left number
	---@param top number
	---@param right number
	---@param bottom number
	---@param rel_left number
	---@param rel_top number
	---@param rel_right number
	---@param rel_bottom number
	---@return URect
	function create_urect(left, top, right, bottom, rel_left, rel_top, rel_right, rel_bottom)
	end
let create-urect-bind =
	intrinsic
		"return create_urect"
		:
		host-func-type
			(
				left : host-number,
				top : host-number,
				right : host-number,
				bottom : host-number,
				rel_left : host-number,
				rel_top : host-number,
				rel_right : host-number,
				rel_bottom : host-number
			)
			->
			((res : URect))
let create-urect =
	lambda
		(
			left : host-number,
			top : host-number,
			right : host-number,
			bottom : host-number,
			rel_left : host-number,
			rel_top : host-number,
			rel_right : host-number,
			rel_bottom : host-number
		)
		let (res) = create-urect-bind(left, top, right, bottom, rel_left, rel_top, rel_right, rel_bottom)
		res

let create-id-bind =
	intrinsic "return create_id" : (host-func-type ((id  : string)) -> ((res  : FeatherID)))
let create-id = lambda (id  : string)
	let  (res)  = create-id-bind(id)
	res

####
	---@param name string
	---@param child Component
	---@return Component
	function create_window(name, child) end
let create-window-bind =
	intrinsic
		"return create_window"
		:
		host-func-type (id : FeatherID, name : string, child : Component) -> ((res : Component))
let create-window =
	lambda (id : FeatherID, name : string, child : Component)
		let (res) = create-window-bind(id, name, child)
		res
####
	---@param area URect
	---@param ... Component
	---@return Component
	function create_region(area, ...) end
let create-region-bind =
	intrinsic
		""""
			return function(id, area, components) return create_region(id, area, components) end
		:
		host-func-type (id : FeatherID, area : URect, components : host-array-type(Component)) -> ((res : Component))

let create-region =
	lambda (id : FeatherID, area : URect, components : host-array-type(Component))
		let (res) = create-region-bind(id, area, components)
		res

####
	---@param area URect
	---@param text string
	---@param onclick EventHandler
	---@param background Component
	---@param color [f32; 4]
	---@return Component
	function create_button(area, text, onclick, background, color) end
let create-button-bind =
	intrinsic
		"return create_button"
		:
		host-func-type (id : FeatherID, area : URect, text : string, onclick : EventHandler, color : host-array-type(host-number)) -> ((res : Component))
let create-button =
	lambda (id : FeatherID, area : URect, text : string, onclick : EventHandler, color : host-array-type(host-number))
		let (res) = create-button-bind(id, area, text, onclick, color)
		res

####
	---@param area URect
	---@param text string
	---@return Component
	function create_label(area, text) end
let create-label-bind =
	intrinsic "return create_label" : (host-func-type (id : FeatherID, area : URect, text : string) -> ((res : Component)))

let create-label =
	lambda (id : FeatherID, area : URect, text : string)
		let (res) = create-label-bind(id, area, text)
		res

####
	---Colors here are 32-bit RGBA integers (for now): 0xFF00FFFF
	---@param area URect
	---@param color integer
	---@param radius number
	---@param border number
	---@param bordercolor integer
	---@return Component
	function create_round_rect(area, color, radius, border, bordercolor) end
let create-round-rect-bind =
	intrinsic
		"return create_round_rect"
		:
		host-func-type (id : FeatherID, area : URect, color : host-number, radius : host-number, border : host-number, bordercolor : host-number) -> ((res : Component))
let create-round-rect =
	lambda (id : FeatherID, area : URect, color : host-number, radius : host-number, border : host-number, bordercolor : host-number)
		let (res) = create-round-rect-bind(id, area, color, radius, border, bordercolor)
		res

let create-shader-standard-bind =
	intrinsic
		"return create_shader_standard"
		:
		host-func-type (id : FeatherID, area : URect, source : host-string, dimborderblur : host-array-type(host-number), corners : host-array-type(host-number), fill : host-array-type(host-number), outline : host-array-type(host-number)) -> ((res : Component))
let create-shader-standard =
	lambda (id : FeatherID, area : URect, source : host-string, dimborderblur : host-array-type(host-number), corners : host-array-type(host-number), fill : host-array-type(host-number), outline : host-array-type(host-number))
		let (res) = create-shader-standard-bind(id, area, source, dimborderblur, corners, fill, outline)
		res

let create-slot-bind = 
	intrinsic
		"return create_slot"
		:
		host-func-type (id : FeatherID, slot : host-number) -> ((res : EventHandler))
let create-slot =
	lambda (id : FeatherID, slot : host-number)
		let (res) = create-slot-bind(id, slot)
		res

let get-appdata-id-bind = 
	intrinsic
		"return get_appdata_id"
		:
		host-func-type () -> ((res : FeatherID))
let get-appdata-id =
	lambda ()
		let (res) = get-appdata-id-bind()
		res

# These function signatures are a bit confusing, but basically, they represent the full signatures of an alicorn function that 
# we will be calling from Rust. In order to accomplish this, we need to express the alicorn function signature using lua types,
# so that we can create a wrapper that calls it from lua. We can then return this lua wrapper function to Rust, which will call it
# from inside our Rust backend. While this sounds complicated, it's the exact same operation one would do when doing C FFI to
# communicate between two languages, we're just using Lua instead of C as the intermediary. 
# Alicorn(windowmaker) -> Lua(Alicorn(windowmaker)) -> mlua -> Rust(Lua(Alicorn(windowmaker))) -> [helper rust function that calls Rust(Lua(Alicorn(windowmaker)))]

# This is the signature for the "windowmaker" function
let windowsig = host-func-type (store : host-unit, appstate : calc-type) -> (store : host-unit, window : Component)
# this is the signature for the "init" function
let initsig = host-func-type () -> ((res : host-unit))
# This is the function for the "onclick" function
let onclicksig = host-func-type (dispatch : host-unit, state : calc-type) -> ((result : calc-type))

let uidesc = tuple-desc(
	window : windowsig,
	init : initsig,
	state : calc-type,
	onclick1 :  onclicksig,
	onclick2 :  onclicksig,
	onclick3 :  onclicksig,
	onclickplus :  onclicksig,
	onclickeq :  onclicksig)

let CLEAR_COLOR = make-host-array(4) 0.8 0.3 0.3 1.0
let OP_COLOR = make-host-array(4) 0.3 0.3 0.3 0.7
let NUM_COLOR = make-host-array(4) 0.3 0.3 0.3 1.0
let EQ_COLOR = make-host-array(4) 0.3 0.8 0.3 1.0
let ROW_COUNT = 4

# let make-button = lambda (i : host-number, x : host-number, y : host-number, txt : host-string, color : host-array-type(host-number))
# 	let btn-rect = create-urect(4, 4, -4, -4, x, y, x + 0.25, y + 0.142857)
# 	create-button(create-id("button"), btn-rect, txt, create-slot(get-appdata-id(), i), color)

# This is our main function that must satisfy the App::Call() trait in Rust. This means it must return two things: a persistent
# store (currently unused), and our final assembled Window component. For convenience, we assemble the rest of our layout inside
# this function and add it directly to our window.
let windowmaker = lambda (store : host-unit, appstate : calc-type) # : (store : host-unit, window : Component)
	let (curnum) = uniffi-alicorn-calc-host-method-get(appstate)
	let (disp) = host-number-to-string(curnum)
	let urect-label = create-urect(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)
	let components = make-host-array(6)
		create-button(create-id("button-1"), create-urect(4, 4, -4, -4, 0, 0.142857, 0.25, 0.285714), "1", create-slot(get-appdata-id(), 0), NUM_COLOR)
		create-button(create-id("button-2"), create-urect(4, 4, -4, -4, 0.25, 0.142857, 0.5, 0.285714), "2", create-slot(get-appdata-id(), 1), NUM_COLOR)
		create-button(create-id("button-3"), create-urect(4, 4, -4, -4, 0.5, 0.142857, 0.75, 0.285714), "3", create-slot(get-appdata-id(), 2), NUM_COLOR)
		create-button(create-id("button-4"), create-urect(4, 4, -4, -4, 0.75, 0.142857, 1.0, 0.285714), "+", create-slot(get-appdata-id(), 3), OP_COLOR)
		create-button(create-id("button-5"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "=", create-slot(get-appdata-id(), 4), EQ_COLOR)
		create-label(create-id("hello-label"), create-urect(0, 0, 0, 0, 0, 0, 1.0, 1.0), disp)
	#let components = host-array-set(components, 6, create-button(create-id("button-6"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "¹∕ₓ", create-slot(get-appdata-id(), 5), OP_COLOR))
	#let components = host-array-set(components, 7, create-button(create-id("button-7"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "%", create-slot(get-appdata-id(), 6), OP_COLOR))
	#let components = host-array-set(components, 8, create-button(create-id("button-8"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "÷", create-slot(get-appdata-id(), 7), OP_COLOR))
	#let components = host-array-set(components, 9, create-button(create-id("button-9"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "7", create-slot(get-appdata-id(), 8), NUM_COLOR))
	#let components = host-array-set(components, 10, create-button(create-id("button-10"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "8", create-slot(get-appdata-id(), 9), NUM_COLOR))
	#let components = host-array-set(components, 11, create-button(create-id("button-11"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "9", create-slot(get-appdata-id(), 10), NUM_COLOR))
	#let components = host-array-set(components, 12, create-button(create-id("button-12"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "×", create-slot(get-appdata-id(), 11), OP_COLOR))
	#let components = host-array-set(components, 13, create-button(create-id("button-13"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "4", create-slot(get-appdata-id(), 12), NUM_COLOR))
	#let components = host-array-set(components, 14, create-button(create-id("button-14"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "5", create-slot(get-appdata-id(), 13), NUM_COLOR))
	#let components = host-array-set(components, 15, create-button(create-id("button-15"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "6", create-slot(get-appdata-id(), 14), NUM_COLOR))
	#let components = host-array-set(components, 16, create-button(create-id("button-16"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "−", create-slot(get-appdata-id(), 15), OP_COLOR))
	#let components = host-array-set(components, 17, create-button(create-id("button-17"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "1", create-slot(get-appdata-id(), 16), NUM_COLOR))
	#let components = host-array-set(components, 18, create-button(create-id("button-18"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "2", create-slot(get-appdata-id(), 17), NUM_COLOR))
	#let components = host-array-set(components, 19, create-button(create-id("button-19"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "3", create-slot(get-appdata-id(), 18), NUM_COLOR))
	#let components = host-array-set(components, 20, create-button(create-id("button-20"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "+", create-slot(get-appdata-id(), 19), OP_COLOR))
	#let components = host-array-set(components, 21, create-button(create-id("button-21"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "⁺∕₋", create-slot(get-appdata-id(), 20), OP_COLOR))
	#let components = host-array-set(components, 22, create-button(create-id("button-22"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "0", create-slot(get-appdata-id(), 21), NUM_COLOR))
	#let components = host-array-set(components, 23, create-button(create-id("button-23"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), ".", create-slot(get-appdata-id(), 22), OP_COLOR))
	#let components = host-array-set(components, 24, create-button(create-id("button-24"), create-urect(4, 4, -4, -4, 0, 0.285714, 0.25, 0.428571), "=", create-slot(get-appdata-id(), 23), EQ_COLOR))
	
	let region = create-region(create-id("main-region"), urect-label, components)
	let window = create-window(create-id("main-window"), "Calculator, from alicorn in feather!", region)
	tuple-of store window

let init = lambda () # : ((res : host-unit))
	tuple-of host-nil

let onclick-1 = lambda (dispatch : host-unit, appstate : calc-type)
	let (newstate) = uniffi-alicorn-calc-host-method-add-digit(appstate, 1)
	tuple-of newstate
	
let onclick-2 = lambda (dispatch : host-unit, appstate : calc-type)
	let (newstate) = uniffi-alicorn-calc-host-method-add-digit(appstate, 2)
	tuple-of newstate
	
let onclick-3 = lambda (dispatch : host-unit, appstate : calc-type)
	let (newstate) = uniffi-alicorn-calc-host-method-add-digit(appstate, 3)
	tuple-of newstate
	
let onclick-plus = lambda (dispatch : host-unit, appstate : calc-type)
	let (newstate) = uniffi-alicorn-calc-host-method-set-op(appstate, uniffi-alicorn-calc-host-enum-calc-op-variant-add)
	tuple-of newstate
	
let onclick-eq = lambda (dispatch : host-unit, appstate : calc-type)
	let (newstate) = uniffi-alicorn-calc-host-method-apply-op(appstate)
	tuple-of newstate

let (uniffi_host) = uniffi-alicorn-calc-host-func-register()

# This is our final UI description, which includes our window creation function, our init() function (currently empty) and
# our onclick event (currently unused)
let res =
	host-tuple-of(uidesc)
		func-to-host-func
			windowmaker
		func-to-host-func
			init
		uniffi_host
		func-to-host-func
			onclick-1
		func-to-host-func
			onclick-2
		func-to-host-func
			onclick-3
		func-to-host-func
			onclick-plus
		func-to-host-func
			onclick-eq

res
